{"version":3,"sources":["storage/Auth.js","viewes/AuthView.js","viewes/BedView.js","serviceWorker.js","index.js"],"names":["Auth","authKey","this","window","localStorage","getItem","setItem","removeItem","AuthView","updateText","event","text","target","value","setState","textInput","authenticate","state","auth","location","reload","className","tagName","onChange","autoFocus","rightIcon","intent","onClick","Component","GET_BEDS","gql","BedView","useState","total","setTotal","available","setAvailable","useQuery","variables","input","hospitalId","getKey","data","loading","error","useEffect","getHospital","hospital","totalBeds","availableBeds","updateType","valueType","type","val","prune_text","validate_value","increment","decrement","parseInt","e","Intent","SUCCESS","large","DANGER","animate","WARNING","logoff","Boolean","hostname","match","client","ApolloClient","uri","process","REACT_GRAPHQL_ENDPOINT","fetch","ReactDOM","render","StrictMode","isAuthenticated","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f4baec2e.chunk.js","sourcesContent":["export default class Auth {\n    authKey = null;\n\n    constructor() {\n        this.authKey = window.localStorage.getItem(\"authKey\");\n    }\n\n    auth(authKey) {\n        // Validate auth\n\n        this.authKey = authKey;\n        window.localStorage.setItem(\"authKey\", this.authKey);\n\n        return this.authKey;\n    }\n\n    getKey(){\n        return this.authKey;\n    }\n\n    isAuthenticated() {\n        return this.authKey !== null;\n    }\n\n    logoff(){\n        window.localStorage.removeItem(\"authKey\");\n        this.authKey = null;\n        return true;\n    }\n}\n","import React, { Component } from 'react';\nimport Auth from \"../storage/Auth\";\nimport './AuthView.css';\n\nimport {Text, EditableText, Button} from '@blueprintjs/core'\n\nclass AuthView extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            textInput: \"\"\n        };\n\n        this.auth = new Auth();\n    }\n\n    updateText = (event) => {\n        let text = event.target.value;\n\n        this.setState({\n            textInput: text\n        })\n    };\n\n    authenticate = () => {\n        if(this.state.textInput && this.state.textInput !== \"\"){\n            this.auth.auth(this.state.textInput);\n        }\n        window.location.reload();\n    };\n\n    render(){\n        return (\n            <div className=\"AuthView\">\n                <Text tagName={\"h1\"}>Gib deine user ID ein</Text>\n                <input\n                    className={\"input\"}\n                    value={this.state.textInput}\n                    onChange={this.updateText}\n                    autoFocus={true}\n                />\n                <Button rightIcon=\"arrow-right\" intent=\"success\" className={\"button\"} onClick={this.authenticate}/>\n                <Text tagName={\"p\"}>Bei fragen, schick uns eine email.</Text>\n            </div>\n        );\n    }\n\n}\n\nexport default AuthView;\n","// Core\nimport React, { useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Auth from \"../storage/Auth\";\n\n// Components\nimport {Text, Button, Intent, ProgressBar} from '@blueprintjs/core'\n\n// Styles\nimport './BedView.css';\n\n// Queries\nconst GET_BEDS = gql`\nquery getHospital($input: GetHospitalInput!) {\n  getHospital(input: $input) {\n    hospital{\n      totalBeds\n      availableBeds\n      unavailableBeds\n    }\n      \n    }\n  }\n`;\n\nfunction BedView(){\n    const auth = new Auth();\n    const [total, setTotal] = useState(0);\n    const [available, setAvailable] = useState(0);\n    const {data, loading, error} = useQuery(GET_BEDS, {\n        variables: {\n            input: {\n                hospitalId: auth.getKey()\n            }\n        }\n    });\n\n    useEffect(() => {\n        if(data && data.getHospital) {\n            setTotal(data.getHospital.hospital.totalBeds);\n            setAvailable(data.getHospital.hospital.availableBeds);\n        }\n    }, [data])\n\n    const updateType = {\n        'total': setTotal,\n        'available': setAvailable\n    };\n\n    const valueType = {\n        'total': total,\n        'available': available\n    };\n\n    const updateText = (type) => (event) => {\n        let val = event.target.value;\n\n        val = prune_text(val);\n        if(!validate_value(val)) return;\n\n        updateType[type](val);\n    };\n\n    const increment = (type) => () => {\n        let val = valueType[type] + 1;\n\n        updateType[type](val);\n    };\n\n    const decrement = (type) => () => {\n        let val = valueType[type] - 1;\n\n        if(!validate_value(val)) return;\n\n        updateType[type](val);\n    };\n\n    const prune_text = (text) => {\n        try{\n            return parseInt(text);\n        } catch (e) {\n            return false\n        }\n    };\n\n    const validate_value = (value) => {\n        return value > -1;\n    };\n\n    return (\n        <div className=\"BedView\">\n            <div className={\"section\"}>\n                <input\n                    className={\"input\"}\n                    value={total}\n                    onChange={updateText('total')}\n                /> <Text tagName={\"h1\"}>Total</Text>\n\n                <br/>\n                <Button rightIcon=\"plus\"\n                        intent={Intent.SUCCESS}\n                        className={\"buttonL\"}\n                        onClick={increment('total')}\n                        large={true}\n                        loading={loading}\n                />\n                <Button rightIcon=\"minus\"\n                        intent={Intent.DANGER}\n                        className={\"buttonR\"}\n                        onClick={decrement('total')}\n                        large={true}\n                        loading={loading}\n                />\n            </div>\n            <div className={\"section\"}>\n                <input\n                    className={\"input\"}\n                    value={available}\n                    onChange={updateText('available')}\n                /> <Text tagName={\"h1\"}>Verf√ºgbar</Text>\n                <br/>\n                <Button rightIcon=\"plus\"\n                        intent={Intent.SUCCESS}\n                        className={\"buttonL\"}\n                        onClick={increment('available')}\n                        large={true}\n                        loading={loading}\n                />\n                <Button rightIcon=\"minus\"\n                        intent={Intent.DANGER}\n                        className={\"buttonR\"}\n                        onClick={decrement('available')}\n                        large={true}\n                        loading={loading}\n                />\n            </div>\n            <Text tagName={\"p\"}>Belastung {parseInt(available/total*100)}%</Text>\n            <ProgressBar animate={false} value={available/total} intent={(available/total < .8 ? Intent.SUCCESS : Intent.DANGER)}/>\n            <br/><br/><br/><br/><br/><br/><br/>\n            <Button rightIcon=\"log-out\"\n                    intent={Intent.WARNING}\n                    onClick={() => auth.logoff() && window.location.reload()}\n                    text={\"Log out\"}\n                    loading={loading}\n            />\n            <br/><br/><br/><br/><br/><br/><br/>\n            <Text tagName={\"p\"}>Bei fragen, schick uns eine email.</Text>\n        </div>\n    );\n}\n\nexport default BedView;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Auth from './storage/Auth';\nimport AuthView from './viewes/AuthView';\nimport BedView from './viewes/BedView';\nimport ApolloClient from 'apollo-boost';\nimport fetch from 'unfetch';\nimport { ApolloProvider } from 'react-apollo';\n\n// Styles\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\n// Service worker\nimport * as serviceWorker from './serviceWorker';\n\n// GraphQL\nconst client = new ApolloClient({\n  uri: process.env.REACT_GRAPHQL_ENDPOINT || 'https://bed-tracking.gigalixirapp.com/api',\n  fetch\n});\n\nlet auth = new Auth();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      {auth.isAuthenticated() ? <BedView/> : <AuthView/>}\n      {/*  <BedView/>*/}\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}